{"version":3,"sources":["components/timer.jsx","components/timerList.jsx","App.js","reportWebVitals.js","index.js"],"names":["Timer","props","useState","time","setTime","autostart","isAutoStart","setIsAutoStart","step","useEffect","ticker","setInterval","onTick","clearInterval","progressLine","useRef","width","className","onClick","Math","floor","substr","style","current","TimerList","console","log","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wMAGaA,EAAQ,SAACC,GAEpB,MAAwBC,mBAASD,EAAME,MAAvC,mBAAOA,EAAP,KAAaC,EAAb,KACA,EAAsCF,mBAASD,EAAMI,WAArD,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAeL,mBAASD,EAAMO,MAAvBA,EAAP,oBAMAC,qBAAU,WAER,IAAMC,EAASC,aAAY,WAErBR,EAAO,GAAKG,GACdF,GAAQ,SAAAD,GAAI,OAAIA,EAAOK,KACvBP,EAAMW,QAAQT,EAAOK,GAAQ,MACX,IAATL,GAAcG,IACvBC,EAAeN,EAAMI,WACrBD,EAAQH,EAAME,SAGfK,GAEH,OAAO,WACLK,cAAcH,MAEf,CAACP,EAAMG,EAAaE,EAAMP,IAE7B,IAAIa,EAAeC,iBAAO,CAAEC,MAAO,SAGnC,OACE,sBAAKC,UAAU,aAAf,UACE,yBAAQA,UAAU,YAAYC,QA5BnB,WACCX,GAAdD,IA2BE,UAAiDA,EAAyB,SAAX,SAA/D,WACA,qBAAKW,UAAU,eAAf,SACE,sBAAMA,UAAU,UAAhB,oBACO,IAAOE,KAAKC,MAAMjB,EAAO,MAASkB,QAAQ,GADjD,eAC0D,KAAOlB,EAAO,IAAkC,GAA3BgB,KAAKC,MAAMjB,EAAO,OAAckB,QAAQ,QAGzH,qBAAKJ,UAAU,gBAAf,SACE,qBAAKA,UAAU,WAAWK,MAAOR,EAAaS,QAAU,CAAEP,MAAc,IAAPb,EAAaF,EAAME,KAAO,aCtBpFqB,MAnBf,WACE,OACE,sBAAKP,UAAU,kBAAf,UACE,cAAC,EAAD,CACEd,KAAM,IACNK,KAAM,IACNH,WAAW,EACXO,OAAQ,SAACT,GAAD,OAAUsB,QAAQC,IAAI,0FAAsBvB,EAAO,2BAE7D,cAAC,EAAD,CACEA,KAAM,OACNE,WAAW,EACXG,KAAM,IACNI,OAAQ,SAACT,GAAD,OAAUsB,QAAQC,IAAI,0FAAsBvB,EAAO,+BCNpDwB,MARf,WACE,OACE,qBAAKV,UAAU,WAAf,SACE,cAAC,EAAD,OCOSW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,YCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,sBAAKtB,UAAU,UAAf,UACE,oBAAIA,UAAU,WAAd,wDACA,cAAC,EAAD,SAGJuB,SAASC,eAAe,SAG1Bb,M","file":"static/js/main.3355fefd.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\n\r\n\r\nexport const Timer = (props) => {\r\n\r\n  const [time, setTime] = useState(props.time);\r\n  const [isAutoStart, setIsAutoStart] = useState(props.autostart);\r\n  const [step] = useState(props.step);\r\n\r\n  const toggle = () => {\r\n    isAutoStart ? setIsAutoStart(false) : setIsAutoStart(true);\r\n  }\r\n\r\n  useEffect(() => {\r\n\r\n    const ticker = setInterval(() => {\r\n\r\n      if (time > 0 && isAutoStart) {\r\n        setTime(time => time - step);\r\n        props.onTick((time - step) / 1000);\r\n      } else if (time === 0 && isAutoStart) {\r\n        setIsAutoStart(props.autostart);\r\n        setTime(props.time);\r\n      }\r\n\r\n    }, step)\r\n\r\n    return () => {\r\n      clearInterval(ticker)\r\n    }\r\n  }, [time, isAutoStart, step, props]);\r\n\r\n  let progressLine = useRef({ width: '100%' });\r\n\r\n\r\n  return (\r\n    <div className=\"wrap_timer\">\r\n      <button className=\"btn_timer\" onClick={toggle}>{!isAutoStart ? 'Start ' : 'Pause '}timer</button>\r\n      <div className=\"wrap_counter\">\r\n        <time className=\"counter\">\r\n          {`${('0' + (Math.floor(time / 60000))).substr(-2)} : ${('0' + (time / 1000 - Math.floor(time / 60000) * 60)).substr(-2)}`}\r\n        </time>\r\n      </div>\r\n      <div className=\"wrap_progress\">\r\n        <div className=\"progress\" style={progressLine.current = { width: time * 100 / props.time + \"%\" }}></div>\r\n      </div >\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport { Timer } from './timer';\r\n\r\nfunction TimerList() {\r\n  return (\r\n    <div className=\"wrap_timer_list\">\r\n      <Timer\r\n        time={5000}\r\n        step={1000}\r\n        autostart={false}\r\n        onTick={(time) => console.log(\"Залишилось часу: \" + time + ' сек.')}\r\n      />\r\n      <Timer\r\n        time={5998000}\r\n        autostart={true}\r\n        step={2000}\r\n        onTick={(time) => console.log(\"Залишилось часу: \" + time + ' сек.')}\r\n      />\r\n    </div >\r\n  )\r\n}\r\n\r\nexport default TimerList;","import TimerList  from './components/timerList';\n\nfunction App() {\n  return (\n    <div className=\"wrap_app\">\n      <TimerList />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './index.css';\nimport './App.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <div className=\"wrap_hw\">\n      <h2 className=\"hw_title\">HW#20 \"React. Lifecycle methods and hooks\"</h2>\n      <App />\n    </div>\n  </React.StrictMode >,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}